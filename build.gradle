apply plugin: "java"
apply plugin: 'maven'

group = 'com.github.WilliamAHartman'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = [ "res/",
                                      "libs/linux32", "libs/linux64",
                                      "libs/macosx32", "libs/macosx64",
                                      "libs/windows32", "libs/windows64",
				      "libs/linuxArm"]
sourceSets.test.java.srcDirs = [ ]
sourceSets.test.resources.srcDirs = [ ]

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}

dependencies {
    compile "com.badlogicgames.gdx:gdx-jnigen:1.9.9"
}

task deleteJniFolder(type: Delete) {
    delete "jni"
}

clean.dependsOn(deleteJniFolder)

task runTester(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.tester.ControllerTester'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task linuxNatives(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.JamepadNativesBuild'
    args = ['build-linux', 'system-SDL2']
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task linuxNativesARM(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.JamepadNativesBuild'
    args = ['build-linuxARM', 'system-SDL2']
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task linuxNatives32(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.JamepadNativesBuild'
    args = ['build-linux32', 'system-SDL2']
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task windowsNatives(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.JamepadNativesBuild'
    args = ['build-windows',  'system-SDL2']
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task OSXNatives(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.JamepadNativesBuild'
    args = ['build-OSX', 'system-SDL2']
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task allNatives(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.JamepadNativesBuild'
    args = ['build-linux', 'build-windows', 'build-OSX']
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}


task dist(dependsOn: classes, type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}

    manifest {
        attributes 'Main-Class': 'com.studiohartman.jamepad.tester.ControllerTester'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// To specify a license in the pom:
install {
    repositories.mavenInstaller {
        pom.project {
            licenses {
                license {
                    name 'zlib License'
                    url 'http://www.zlib.net/zlib_license.html'
                    distribution 'repo'
                }
            }
        }
    }
}
